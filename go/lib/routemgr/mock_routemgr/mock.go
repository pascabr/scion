// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/lib/routemgr (interfaces: Publisher,PublisherFactory)

// Package mock_routemgr is a generated GoMock package.
package mock_routemgr

import (
	gomock "github.com/golang/mock/gomock"
	routemgr "github.com/scionproto/scion/go/lib/routemgr"
	reflect "reflect"
)

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// AddRoute mocks base method
func (m *MockPublisher) AddRoute(arg0 routemgr.Route) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRoute", arg0)
}

// AddRoute indicates an expected call of AddRoute
func (mr *MockPublisherMockRecorder) AddRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoute", reflect.TypeOf((*MockPublisher)(nil).AddRoute), arg0)
}

// Close mocks base method
func (m *MockPublisher) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockPublisherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPublisher)(nil).Close))
}

// DeleteRoute mocks base method
func (m *MockPublisher) DeleteRoute(arg0 routemgr.Route) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRoute", arg0)
}

// DeleteRoute indicates an expected call of DeleteRoute
func (mr *MockPublisherMockRecorder) DeleteRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockPublisher)(nil).DeleteRoute), arg0)
}

// MockPublisherFactory is a mock of PublisherFactory interface
type MockPublisherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherFactoryMockRecorder
}

// MockPublisherFactoryMockRecorder is the mock recorder for MockPublisherFactory
type MockPublisherFactoryMockRecorder struct {
	mock *MockPublisherFactory
}

// NewMockPublisherFactory creates a new mock instance
func NewMockPublisherFactory(ctrl *gomock.Controller) *MockPublisherFactory {
	mock := &MockPublisherFactory{ctrl: ctrl}
	mock.recorder = &MockPublisherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisherFactory) EXPECT() *MockPublisherFactoryMockRecorder {
	return m.recorder
}

// NewPublisher mocks base method
func (m *MockPublisherFactory) NewPublisher() routemgr.Publisher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPublisher")
	ret0, _ := ret[0].(routemgr.Publisher)
	return ret0
}

// NewPublisher indicates an expected call of NewPublisher
func (mr *MockPublisherFactoryMockRecorder) NewPublisher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPublisher", reflect.TypeOf((*MockPublisherFactory)(nil).NewPublisher))
}
